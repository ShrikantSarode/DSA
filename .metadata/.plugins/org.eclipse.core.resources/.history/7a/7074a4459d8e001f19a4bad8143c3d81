package sortingLinkedList;
//merge sort
public class Merge_LinkedList {

	Node root;

	void create() {
		root = null;
	}

	void insert(int data) {
		Node n = new Node(data);
		if (root == null) {
			root = n;
		} else {
			n.next = root;
			root = n;

		}
	}
	
	Node mergeSortRec(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node middle = getMiddle(head);
        Node nextOfMiddle = middle.next;
        middle.next = null;

        Node left = mergeSortRec(head);
        Node right = mergeSortRec(nextOfMiddle);

        return merge_list(left, right);
    }

    // Function to get the middle of the linked list
    Node getMiddle(Node head) {
        if (head == null) {
            return head;
        }

        Node slow = head, fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }



	void print() {
		Node t = root;
		while (t != null) {
			System.out.print(t.data + " ");
			t = t.next;
		}
		System.out.println();
	}
	public static void main(String[] args) {
		Merge_LinkedList list1 = new Merge_LinkedList();
		list1.create();
		list1.insert(10);
		list1.insert(10);
		list1.insert(10);
		list1.insert(10);
		list1.insert(10);
		Merge_LinkedList list2 = new Merge_LinkedList();
		list2.create();
		list2.insert(20);
		list2.insert(20);
		list2.insert(20);
		list2.insert(20);
		list2.insert(20);
		
	}
}
