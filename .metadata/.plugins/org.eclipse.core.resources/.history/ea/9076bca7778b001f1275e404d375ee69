package linkedlist;

public class Circular_linked_list_class {
	Node root, last; // Head of the linked list

	void create_list() {
		root = last = null; // Preparing with empty root
	}

	void insertLeft(int data) {
		Node n = new Node(data);
		if (root == null) {
			root = last = n; // If list is empty, set root to new node
		} else {
			n.next = root; // Point new node to current root
			root = n; // Update root to the new node
			last.next = root; // Maintain circular link
		}
		System.out.println(data + " inserted on the left");
	}

	void deleteLeft() {
		if (root == null) {
			System.out.println("Empty List");
		} else if (root == last) {
			// Only one node in the list
			System.out.println(root.data + " deleted from the left");
			root = last = null; // List becomes empty
		} else {
			Node t = root; // Keep track of the node to delete
			root = root.next; // Move root to the next node
			last.next = root; // Maintain circular link
			System.out.println(t.data + " deleted from the left");
		}
	}

	void insertRight(int data) {
		Node n = new Node(data);
		if (root == null) {
			root = last = n; // If list is empty, set root to new node
			last.next = root; // Maintain circular link
		} else {
			last.next = n; // Last node's next points to new node
			last = n; // Update last to new node
			last.next = root; // New node's next points to root
		}
		System.out.println(data + " inserted on the right");
	}

	void deleteRight() {
		if (root == null) {
			System.out.println("Empty List");
		} else if (root == last) {
			// Only one node in the list
			System.out.println(root.data + " deleted from the right");
			root = last = null; // List becomes empty
		} else {
			Node t = root;
			while (t.next != last) {
				t = t.next; // Move t to the second last node
			}
			System.out.println(last.data + " deleted from the right");
			t.next = root; // Update second last node to point to root
			last = t; // Update last to second last node
		}
	}

	void printList() {
	    if (root == null) {
	        System.out.println("List Empty");
	    } else {
	        Node t = root;
	        do {
	            System.out.print("|" + t.data + "|->");
	            t = t.next;
	        } while (t != root); // Stop when back at root
	        System.out.println("|" + root.data + "|"); // Maintain circular structure
	    }
	}


}
