package dsaAssignment18oct;

import java.util.Scanner;

public class BinaryTree {

	Node root;

	BinaryTree() {
		root = null;
	}

	void insert(int key) {
		root = add(root, key);
	}

	Node add(Node root, int data) {

		if (root == null) {
			root = new Node(data);
			return root;
		}

		if (data < root.data) {
			root.left = add(root, data);
		} else {
			root.right = add(root, data);
		}
		return root;
	}

	void preorder(Node root)// plr
	{
		while (root != null) {
			System.out.println(root.data + " ");
			preorder(root.left);
			preorder(root.right);
		}

	}

	void postorder(Node root)// lrp
	{
		while (root != null) {
			postorder(root.left);
			postorder(root.right);
			System.out.println(root.data + " ");
		}
	}

	void inorder(Node root)// lpr
	{
		while (root != null) {
			inorder(root.left);
			inorder(root.right);
			System.out.println(root.data + " ");
		}

	}
	
	void print()
	{
		for(pri : )
	}

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		BinaryTree obj = new BinaryTree();

		int ch;
		do {
			System.out.println("=================================");
			System.out.println("Menu");
			System.out.println("1.Insert");
			System.out.println("2.Pre-Order");
			System.out.println("3.Post-Order");
			System.out.println("4.In-Order");
			System.out.println("0.Exiting");
			System.out.println("Enter Choice:");
			System.out.println("=================================");
			ch = sc.nextInt();

			switch (ch) {
			case 1:
				System.out.println("Enter Element:");
				int element = sc.nextInt();
				obj.add(obj.root, element);
				break;

			case 2:
				obj.preorder(obj.root);
				break;

			case 3:
				obj.postorder(obj.root);
				break;
			case 4:
				obj.preorder(obj.root);

				break;
			case 0:
				System.out.println("Exiting...");
				break;

			default:
				System.out.println("Invalid Choice!!");
				break;
			}
		} while (ch != 0);

	}
}