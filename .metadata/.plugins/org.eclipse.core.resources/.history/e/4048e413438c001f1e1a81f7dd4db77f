package treeexample;

public class Tree_Class {

	Node root;

	void create_tree() {
		root = null;
	}

	void insert(Node r, Node n)// r= root and n=New node
	{
		if (root == null) {
			root = n;
		} else {
			if (n.data < r.data) {
				if (r.left == null)// empty left
				{
					r.left = n;
				} else {
					insert(r.left, n);// recurrsion call

				}
			} else {// if equal or greater than to right
				if (r.right == null)// empty left
				{
					r.right = n;
				} else {
					insert(r.right, n);// recurrsion call

				}
			}
		}
	}

	void inorder(Node r) {
		if (r != null) {// LPR
			inorder(r.left);// L
			System.out.print(r.data + ",");// P
			inorder(r.right);// L
		}
	}

	void preorder(Node r) {
		if (r != null) {// PLR
			System.out.print(r.data + ",");// P
			preorder(r.right);// L
			preorder(r.left);// R
		}
	}

	void postorder(Node r) {
		if (r != null) {// LRP
			postorder(r.left);// L
			postorder(r.right);// r
			System.out.print(r.data + ",");// P
		}
	}
	void search(Node r, Node key) {
	    if (r == null) {
	        root = key; // If root is null, set it to the key
	    } else {
	        if (key.data < r.data) {
	            if (r.left == null) { // If left is empty
	                r.left = key;
	            } else {
	                search(r.left, key); // Recursion call
	            }
	        } else {
	            if (r.right == null) { // If right is empty
	                r.right = key;
	            } else {
	                search(r.right, key); // Recursion call
	            }
	        }
	    }
	}


	public static void main(String args[]) {
        Tree_Class obj = new Tree_Class();
        obj.create_tree();

        obj.insert(obj.root, new Node(10));
        obj.insert(obj.root, new Node(30));
        obj.insert(obj.root, new Node(20));
        obj.insert(obj.root, new Node(5));
        obj.insert(obj.root, new Node(15));

        System.out.println("Tree has:");
        System.out.println("\nIn-Order:");
        obj.inorder(obj.root);
        System.out.println("\n========================");
        System.out.println("\nPre-Order:");
        obj.preorder(obj.root);
        System.out.println("\n========================");
        System.out.println("\nPost-Order:");
        obj.postorder(obj.root);
        System.out.println("\n========================");

        System.out.println("Search:");
        Node searchRoot = new Node(50); // Initial root for search operation
        Node key = new Node(10); // Node to be inserted
        
	}

}
